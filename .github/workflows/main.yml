name: Deploy to Amazon ECS

on:
  pull_request:
    types:
      - closed

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  ECS_SERVICE: btg-pactual-service
  ECS_CLUSTER: btg-pactual-cluster
  ECS_TASK_DEFINITION: btg-pactual-task-definition
  CONTAINER_NAME: btg-pactual-container
  PM2_PUBLIC_KEY: ${{ secrets.PM2_PUBLIC_KEY }}
  PM2_SECRET_KEY: ${{ secrets.PM2_SECRET_KEY }}

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Install dependencies
      run: npm install

    - name: Build application
      run: npm run build

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build --build-arg PM2_PUBLIC_KEY="${{ secrets.PM2_PUBLIC_KEY }}" --build-arg PM2_SECRET_KEY="${{ secrets.PM2_SECRET_KEY }}" -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    - name: Run CloudFormation deployment script
      env:
        STACK_NAME: btg-pactual-task-definition
        TEMPLATE_FILE: cloudformation-definition.json
        REGION: ${{ env.AWS_REGION }}
        ECS_CLUSTER_NAME: ${{ env.ECS_CLUSTER }}
        ECS_SERVICE_NAME: ${{ env.ECS_SERVICE }}
      run: |
        chmod +x deploy-stack.sh
        ./deploy-stack.sh

    - name: Check deployment status
      run: |
        status=$(aws cloudformation describe-stacks --stack-name btg-pactual-task-definition --region ${{ env.AWS_REGION }} --query 'Stacks[0].StackStatus' --output text)
        if [[ $status != "CREATE_COMPLETE" && $status != "UPDATE_COMPLETE" ]]; then
          echo "Deployment failed. Stack status: $status"
          exit 1
        fi
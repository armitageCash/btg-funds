name: Deploy to ECS Fargate

on:
  pull_request:
    types:
      - closed

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  ECS_SERVICE: btg-pactual-service
  ECS_CLUSTER: btg-pactual-cluster
  ECS_TASK_DEFINITION: btg-pactual-task-definition
  CONTAINER_NAME: btg-pactual-container

jobs:
  create-docker-image:
    name: Build docker
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Install dependencies
        run: npm install  
      - name: Run npm build
        run: npm run build
      - name: Login into AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Create and add tags to docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  cloudformation-stack-up:
    name: Cloudformation-Stack-Up
    runs-on: ubuntu-latest
    needs: create-docker-image
    if: github.event_name == 'pull_request' && github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Check if ECS cluster exists
        id: check-ecs-cluster
        run: |
          cluster_exists=$(aws ecs describe-clusters --clusters ${{ env.ECS_CLUSTER }} --region ${{ env.AWS_REGION }} --query 'clusters[0].clusterName' --output text)
          if [ "$cluster_exists" == "None" ]; then
            echo "Cluster does not exist. Creating cluster..."
            aws ecs create-cluster --cluster-name ${{ env.ECS_CLUSTER }} --region ${{ env.AWS_REGION }}
          else
            echo "Cluster exists: $cluster_exists"
          fi
      - name: Check if ECS service exists
        id: check-ecs-service
        run: |
          service_exists=$(aws ecs describe-services --cluster ${{ env.ECS_CLUSTER }} --services ${{ env.ECS_SERVICE }} --region ${{ env.AWS_REGION }} --query 'services' --output json)
          echo "::set-output name=service_exists::$(echo $service_exists | jq length)"
      - name: cloudformation-stack-up
        run: |
          # Cambia la ruta al script Bash que deseas ejecutar
          bash deploy-stack.sh
name: Deploy to Amazon ECS

on:
  pull_request:
    types:
      - closed

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  ECS_SERVICE: btg-pactual-service
  ECS_CLUSTER: btg-pactual-cluster
  ECS_TASK_DEFINITION: btg-pactual-task-definition
  CONTAINER_NAME: btg-pactual-container
  PM2_PUBLIC_KEY: ${{ secrets.PM2_PUBLIC_KEY }}
  PM2_SECRET_KEY: ${{ secrets.PM2_SECRET_KEY }}

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Get short commit SHA
      id: vars
      run: echo "commitId=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

    - name: Install dependencies
      run: npm install

    - name: Build application
      run: npm run build

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build --build-arg PM2_PUBLIC_KEY="${{ secrets.PM2_PUBLIC_KEY }}" --build-arg PM2_SECRET_KEY="${{ secrets.PM2_SECRET_KEY }}" -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.commitId }} .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.commitId }}
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:${{ env.commitId }}"

    - name: Run CloudFormation deployment script
      env:
        STACK_NAME: btg-pactual-task-definition
        TEMPLATE_FILE: cloudformation-definition.json
        REGION: ${{ env.AWS_REGION }}
        ECS_CLUSTER_NAME: ${{ env.ECS_CLUSTER }}
        ECS_SERVICE_NAME: ${{ env.ECS_SERVICE }}
      run: |
        chmod +x deploy-stack.sh
        ./deploy-stack.sh

  update-latest-changes:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Update ECS Service with New Image
        run: |
          # Obtener la definición de tarea actual
          aws ecs describe-task-definition \
            --task-definition ${{ env.ECS_TASK_DEFINITION }} > task-definition.json

          # Reemplazar la imagen en la definición de la tarea con la nueva imagen de ECR
          new_task_def=$(cat task-definition.json | jq --arg IMAGE "${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.commitId }}" '.taskDefinition | .containerDefinitions[0].image=$IMAGE')

          # Crear una nueva revisión de la definición de tarea con la nueva imagen
          echo $new_task_def > new-task-def.json
          aws ecs register-task-definition \
            --family ${{ env.ECS_TASK_DEFINITION }} \
            --cli-input-json file://new-task-def.json

      - name: Update ECS Service to Use New Task Definition
        run: |
          # Obtener la última revisión de la definición de tarea
          new_revision=$(aws ecs describe-task-definition \
            --task-definition ${{ env.ECS_TASK_DEFINITION }} \
            --query 'taskDefinition.revision')

          # Actualizar el servicio ECS con la nueva revisión de la definición de tarea
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition ${{ env.ECS_TASK_DEFINITION }}:$new_revision

      - name: Wait for ECS Service to Stabilize
        run: |
          # Esperar a que el servicio se actualice y estabilice
          aws ecs wait services-stable \
            --cluster ${{ env.ECS_CLUSTER }} \
            --services ${{ env.ECS_SERVICE }}
